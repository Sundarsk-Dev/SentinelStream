# Version must be 3.8 or higher to use depends_on with condition
version: '3.8'

services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.6.1
    container_name: zookeeper
    hostname: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    healthcheck:
      test: [ "CMD", "bash", "-c", "echo ruok | nc localhost 2181 | grep imok" ]
      interval: 10s
      timeout: 5s
      retries: 5

  broker:
    image: confluentinc/cp-kafka:7.6.1
    container_name: broker
    hostname: broker
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - "9092:9092"
      - "29092:29092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: 'PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT'
      KAFKA_ADVERTISED_LISTENERS: 'PLAINTEXT://broker:29092,PLAINTEXT_HOST://localhost:9092'
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
    healthcheck:
      test: [ "CMD", "bash", "-c", "nc -z localhost 9092" ]
      interval: 10s
      timeout: 5s
      retries: 5

  schema-registry:
    image: confluentinc/cp-schema-registry:7.6.1
    container_name: schema-registry
    hostname: schema-registry
    depends_on:
      broker:
        condition: service_healthy
    ports:
      - "8081:8081"
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: 'broker:29092'
      SCHEMA_REGISTRY_LISTENERS: "http://0.0.0.0:8081"
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8081" ]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:6.2-alpine
    container_name: redis
    hostname: redis
    ports:
      - "6379:6379"
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 10s
      timeout: 5s
      retries: 5

  producer:
    build:
      context: .
      dockerfile: ./src/stream_ingestion/Dockerfile
    container_name: producer
    hostname: producer
    depends_on:
      broker:
        condition: service_healthy
    volumes:
      - ./src/stream_ingestion:/app/src/stream_ingestion
    entrypoint: [ "tail", "-f", "/dev/null" ]

  consumer-with-api:
    build:
      context: .
      dockerfile: ./src/rule_engine/Dockerfile
    container_name: consumer-with-api
    hostname: consumer-with-api
    depends_on:
      broker:
        condition: service_healthy
      model-serving:
        condition: service_healthy
    volumes:
      - ./src/rule_engine:/app/src/rule_engine
    entrypoint: [ "tail", "-f", "/dev/null" ]

  model-serving:
    build:
      context: .
      dockerfile: ./src/model_serving/Dockerfile
    container_name: model-serving
    hostname: model-serving
    depends_on:
      redis:
        condition: service_healthy
    ports:
      - "8000:8000"
    volumes:
      - ./src/model_serving:/app/src/model_serving
      - ./src/stream_processing:/app/src/stream_processing
    environment:
      - PYTHONUNBUFFERED=1
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8000/health || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 5

  # Apache Flink services
  jobmanager:
    image: apache/flink:1.18-scala_2.12
    container_name: jobmanager
    hostname: jobmanager
    ports:
      - "8081:8081"
    command: jobmanager
    environment:
      - |
        FLINK_PROPERTIES=
        jobmanager.rpc.address: jobmanager
        jobmanager.bind-host: 0.0.0.0
        rest.bind-address: 0.0.0.0

  taskmanager:
    image: apache/flink:1.18-scala_2.12
    container_name: taskmanager
    hostname: taskmanager
    depends_on:
      - jobmanager
    command: taskmanager
    environment:
      - |
        FLINK_PROPERTIES=
        jobmanager.rpc.address: jobmanager
        jobmanager.bind-host: 0.0.0.0
        taskmanager.numberOfTaskSlots: 2
